datasource db {
  provider = "postgresql"  // Cambia según tu base de datos
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum WeekDay {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  profile       Profile?       @relation(fields: [profileId], references: [id])
  profileId     Int?           @unique
  sessions      Session[]
  notifications Notification[]
  appointments  Appointment[]
}

model Profile {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  phone       String?
  birthDate   DateTime?
  address     String?
  user        User?    @relation
}

model Session {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  token       String    @unique
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
  userAgent   String?
  ipAddress   String?
}

model Notification {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  title       String
  message     String
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())
}

model Schedule {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  availableDays AvailableDay[]
  appointments Appointment[]
}

// Días disponibles
model AvailableDay {
  id          Int       @id @default(autoincrement())
  schedule    Schedule  @relation(fields: [scheduleId], references: [id])
  scheduleId  Int
  dayOfWeek   WeekDay
  startTime   String    // Formato "HH:mm"
  endTime     String    // Formato "HH:mm"
}

// Cita con relación a Cliente, Usuario, Servicios y Promoción
model Appointment {
  id           Int               @id @default(autoincrement())

  user         User?             @relation(fields: [userId], references: [id])
  userId       Int?

  client       Clients?          @relation(fields: [clientId], references: [id])
  clientId     Int?
  hora         Int?
  schedule     Schedule          @relation(fields: [scheduleId], references: [id])
  scheduleId   Int

  // Relación con Promociones (una cita puede tener una promoción aplicada)
  promotion    Promotions?       @relation(fields: [promotionId], references: [id])
  promotionId  Int?

  date         DateTime
  createdAt    DateTime          @default(now())
  status       AppointmentStatus @default(PENDING)
  notes        String?

  // Relación muchos a muchos con Services a través de AppointmentServices
  appointmentServices AppointmentServices[]
}

model Clients {
  id          Int           @id @default(autoincrement())
  name        String
  secondName  String?
  nickname    String?
  address     String?
  email       String?       @unique
  phone       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  appointments Appointment[]
}

model Services {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  price       Float
  duration    Int               // Duración en minutos
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  promotionServices PromotionServices[]
  appointmentServices AppointmentServices[] // Nueva relación inversa
}

model Promotions {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  discount    Float             // Porcentaje de descuento
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  promotionServices PromotionServices[]
  appointments      Appointment[]         // Nueva relación inversa
}

model PromotionServices {
  promotionId Int
  serviceId   Int

  promotion   Promotions        @relation(fields: [promotionId], references: [id])
  service     Services          @relation(fields: [serviceId], references: [id])

  @@id([promotionId, serviceId])
}

// Nueva tabla intermedia para relacionar Appointment con Services
model AppointmentServices {
  appointmentId Int
  serviceId     Int

  appointment   Appointment       @relation(fields: [appointmentId], references: [id])
  service       Services          @relation(fields: [serviceId], references: [id])

  @@id([appointmentId, serviceId])
}
