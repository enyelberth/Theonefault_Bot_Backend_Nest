datasource db {
  provider = "postgresql"  // Cambia según tu base de datos
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  username      String
  profile       Profile?       @relation(fields: [profileId], references: [id])
  profileId     Int?           @unique
  sessions      Session[]
  notifications Notification[]
  accounts      Account[]
}

model Profile {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  phone       String?
  birthDate   DateTime?
  address     String?
  user        User?    @relation
}

model Session {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  token       String    @unique
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
  userAgent   String?
  ipAddress   String?
}

model Notification {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  title       String
  message     String
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())
}

model Account {
  id          Int           @id @default(autoincrement())
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  email       String        @unique
  phone       String?
  password    String
  apiKey      String        @unique
  apiSecret   String        @unique

  balance     Float         @default(0)           // Campo para saldo o balance

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  transactions Transaction[]
}

model CryptoPair {
  id          Int       @id @default(autoincrement())
  symbolPair  String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  prices      CryptoPrice[]
  transactions Transaction[]
}

model CryptoPrice {
  id          Int         @id @default(autoincrement())
  pairId      Int
  pair        CryptoPair  @relation(fields: [pairId], references: [id])
  price       Float
  createdAt   DateTime    @default(now())
}

model Transaction {
  id             Int         @id @default(autoincrement())
  idTransaction  String      @unique
  accountId      Int
  account        Account     @relation(fields: [accountId], references: [id])

  typeOrder      String      // ej: "limit", "market", "stop-limit"
  amount         Float       // cantidad de cripto
  currency       String      // moneda fiat o base, ej: "USDT"

  cryptoPairId   Int
  pair           CryptoPair  @relation(fields: [cryptoPairId], references: [id])

  side           String      // "buy" o "sell"
  status         String      // "open", "closed", "cancelled", etc.

  entryPrice     Float       // precio al abrir la operación
  entryTimestamp DateTime    @default(now())

  exitPrice      Float?      // precio al cerrar, nullable
  exitTimestamp  DateTime?   // fecha cierre, nullable

  profitLoss     Float?      // ganancia o pérdida calculada al cerrar

  isClosed       Boolean     @default(false)

  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}
