CREATE OR REPLACE FUNCTION create_account_balances()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO "AccountBalance" ("accountId", "currencyCode", "balance")
  SELECT NEW.id, code, 0 FROM "Currency";

  RETURN NEW;
END;
$$ LANGUAGE plpgsql;



CREATE TRIGGER account_after_insert
AFTER INSERT ON "Account"
FOR EACH ROW
EXECUTE PROCEDURE create_account_balances();











//////////////////
CREATE OR REPLACE FUNCTION insert_journal_entry(
    p_entryDate timestamp,
    p_description text,
    p_createdBy text,
    p_statusId int,
    p_lines jsonb -- las líneas enviadas en formato JSONB
) RETURNS int AS $$
DECLARE
    v_entryId int;
    line jsonb;
BEGIN
    -- Insertar en JournalEntry y obtener id generado
    INSERT INTO "JournalEntry" ("entryDate", "description", "createdBy", "statusId", "createdAt")
    VALUES (p_entryDate, p_description, p_createdBy, p_statusId, now())
    RETURNING id INTO v_entryId;

    -- Iterar por cada línea del JSONB para insertarla
    FOR line IN SELECT * FROM jsonb_array_elements(p_lines)
    LOOP
        INSERT INTO "JournalEntryLine" ("entryId", "accountId", "currencyCode", "amount", "entryType")
        VALUES (
            v_entryId,
            (line ->> 'accountId')::int,
            line ->> 'currencyCode',
            (line ->> 'amount')::numeric,
            (line ->> 'entryType')::text
        );
    END LOOP;

    RETURN v_entryId; -- Retornas el id de la entrada creada
END;
$$ LANGUAGE plpgsql;




const p_lines = JSON.stringify(createJournalEntryDto.lines);

const result = await prisma.$queryRaw`
  SELECT insert_journal_entry(
    ${createJournalEntryDto.entryDate},
    ${createJournalEntryDto.description},
    ${createJournalEntryDto.createdBy},
    ${createJournalEntryDto.statusId ?? 1},
    ${p_lines}::jsonb
  )
`;











CREATE OR REPLACE FUNCTION insertar_journal_entry_con_lineas(
    p_entryDate TIMESTAMP,
    p_description TEXT,
    p_createdBy TEXT,
    p_statusId INT,
    p_accountId INT,
    p_currencyCode VARCHAR(5),
    p_amount NUMERIC,
    p_entryType TEXT
)
RETURNS INT AS $$
DECLARE
    v_entryId INT;
BEGIN
    -- Inserta en JournalEntry y retorna el id
    INSERT INTO "JournalEntry" ("entryDate", "description", "createdBy", "statusId", "createdAt")
    VALUES (p_entryDate, p_description, p_createdBy, p_statusId, NOW())
    RETURNING id INTO v_entryId;

    -- Inserta en JournalEntryLine con el id retornado
    INSERT INTO "JournalEntryLine" ("entryId", "accountId", "currencyCode", "amount", "entryType")
    VALUES (v_entryId, p_accountId, p_currencyCode, p_amount, p_entryType);

    RETURN v_entryId;
END;
$$ LANGUAGE plpgsql;

--PRasda



SELECT insertar_journal_entry_con_lineas(
    '2025-08-16 20:00:00',
    'Descripción de la entrada',
    'usuario_creador',
    1,
    1,
    'USDT',
    100.00,
    'INGRESO'
);




CREATE OR REPLACE FUNCTION fn_after_order_filled()
RETURNS TRIGGER AS $$
BEGIN
  IF NEW.status = 'FILLED' THEN
    INSERT INTO "TradingExecution" ("orderId", "tradePrice", "tradeQuantity", "tradeTimestamp")
    VALUES (NEW.id, COALESCE(NEW.price, 0), NEW.quantity, NOW());
    -- Aquí podrías agregar lógica adicional para actualizar saldos o generar contraparte
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_after_order_update
AFTER UPDATE ON "TradingOrder"
FOR EACH ROW
WHEN (OLD.status IS DISTINCT FROM NEW.status)
EXECUTE FUNCTION fn_after_order_filled();









{
  "symbol": "ETHFDUSD",
  "orderId": 7935619,
  "orderListId": -1,
  "clientOrderId": "51TJcKtGMUo8dOtVXLEqV5",
  "transactTime": 1755532065253,
  "price": "5000.00000000",
  "origQty": "0.20000000",
  "executedQty": "0.00000000",
  "origQuoteOrderQty": "0.00000000",
  "cummulativeQuoteQty": "0.00000000",
  "status": "NEW",
  "timeInForce": "GTC",
  "type": "LIMIT",
  "side": "SELL",
  "workingTime": 1755532065253,
  "fills": [],
  "selfTradePreventionMode": "EXPIRE_MAKER"
}

{
  "symbol": "LINKFDUSD",
  "strategyType": "gridBuy",
  "config": {
    "gridCount": 20,
    "lowerPrice": 25.0,
    "upperPrice": 26.1,
    "totalQuantity": 20,
    "profitMargin": 0.00151,
  }
}
